/*
 * @package AJAX_Chat
 * @author Sebastian Tschan
 * @copyright (c) 2007 Sebastian Tschan
 * @license http://creativecommons.org/licenses/by-sa/
 * @link https://blueimp.net/ajax/
 */


AJAX Chat
=========

Version 0.5.6.1 standalone 2007/11/12




Requirements
============

Server-Side:

- PHP >= 4
- MySQL >= 4


Client-Side:

- Enabled JavaScript
- Enabled Cookies




Installation
============

1.	Configuration settings
	----------------------

	Edit database settings in lib/config.php:

	$config['dbConnection']['host'] = 'your_database_hostname';
	$config['dbConnection']['user'] = 'your_database_username';
	$config['dbConnection']['pass'] = 'your_database_password';
	$config['dbConnection']['name'] = 'your_database_name';
	
	The database settings "type" and "link" are set to "null" by default.
	If "type" is set to "null" it defaults to "mysqli" if existing, else to "mysql".
	"link" can be set as reference to an existing database connection link or object.
	If "link" is set to null, a new database connection is created.


2.	Channel settings:
	-----------------
	
	Edit channels in lib/data/channels.php.
	
	Each channel must have a unique id (the $channels array index) and a unique name.
	Whitespace in the channel names will be converted to the underscore "_".


3.	User settings:
	--------------

	Edit users in lib/data/users.php.
	
	Each user must have a unique id (the $users array index) and a unique name.
	The first user in the list (array index 0) is used for the guest user settings.
	All guest users will have access to the channels set for this user and the user role AJAX_CHAT_GUEST.
	Registered users can have the user roles AJAX_CHAT_USER, AJAX_CHAT_MODERATOR or AJAX_CHAT_ADMIN.
	The list of channels a user has access to can be set for each user individually.
	Whitespace in the user names will be converted to the underscore "_".


4.	Creation of database tables
	---------------------------

	Execute the provided SQL script chat.sql by using phpMyAdmin:
	http://www.phpmyadmin.net/
	
	On phpMyAdmin, select your database and click on "Import".
	Select the file chat.sql from your local harddisk and click on "OK".
	This should execute the included commands to create the tables needed by this chat.


5.	Upload to the server
	--------------------

	Upload the chat folder to your server somewhere under your document root:
	e.g. http://example.org/path/to/chat/


Ready! Just place a link to the chat directory on your website. :)




Configuration files:
====================

AJAX Chat is fully customizable and contains two configuration files:

1.	lib/config.php
	--------------
	This file contains the server side (PHP) settings.

2.	js/config.js
	------------
	This file contains the client side (JavaScript) settings.

Each configuration option is explained with a comment prior to the setting assignment.




Customizing the layout:
=======================

The layout of AJAX Chat is fully customizable by using CSS (Cascaded Style Sheets).
AJAX Chat comes with a predefined set of styles. To add your own style, do the following:

1.	Add a new CSS file (e.g. mystyle.css) by copying one of the existing files from the CSS directory.

2.	Edit your file (css/mystyle.css) and adjust the CSS settings to your liking.

3.	Add the name of your style without file extension to the available styles in lib/config.php:

	// Available styles:
	$config['styleAvailable'] = array('mystyle','beige','black','grey');
	// Default style:
	$config['styleDefault'] = 'mystyle';

If customizing the layout by using CSS is not enough, adjust the template files in lib/template/.




Logs:
=====
	
	By default, AJAX Chat stores all chat messages in the database.
	To access the logs you have to add the GET parameter view=logs to your chat url:
	
	e.g. http://example.org/path/to/chat/?view=logs
	
	If you are not already logged in, you have to login as administrator to access the logs.
	
	The log view enables you to monitor the latest chat messages on all channels.
	It is also possible to view the logs of private rooms and private messages.
	You have the option to filter the logs by date, time and search strings.
	
	The search filter accepts MySQL style regular expressions:
	http://dev.mysql.com/doc/refman/5.1/en/regexp.html




Shoutbox:
=========
	
	AJAX Chat is also usable as shoutbox - this is a short guide on how to set it up:


	1. Shoutbox stylesheet
	----------------------
	
	Add the following line to the stylesheet (CSS) of all pages displaying the shoutbox:
	
	@import url("http://example.org/path/to/chat/css/shoutbox.css");
	
	Replace http://example.org/path/to/chat/ with the URL to the chat.
	Modify css/shoutbox.css to your liking.
	
	
	2. Shoutbox function
	--------------------
	
	Add the following function to your PHP code:
	
	<?php
	function getShoutBoxContent() {
		// URL to the chat directory:
		if(!defined('AJAX_CHAT_URL')) {
			define('AJAX_CHAT_URL', './chat/');
		}
		
		// Path to the chat directory:
		if(!defined('AJAX_CHAT_PATH')) {
			define('AJAX_CHAT_PATH', realpath(dirname($_SERVER['SCRIPT_FILENAME']).'/chat').'/');
		}
		
		// Validate the path to the chat:
		if(is_file(AJAX_CHAT_PATH.'lib/classes.php')) {
			
			// Include Class libraries:
			require_once(AJAX_CHAT_PATH.'lib/classes.php');
			
			// Initialize the shoutbox:
			$ajaxChat = new CustomAJAXChatShoutBox();
			
			// Parse and return the shoutbox template content:
			return $ajaxChat->getShoutBoxContent();
		}
		
		return null;
	}
	?>
	
	Make sure AJAX_CHAT_URL and AJAX_CHAT_PATH point to the chat directory.


	2. Shoutbox output
	------------------
	
	Display the shoutbox content using the shoutbox function:
	
	<div style="width:200px;"><?php echo getShoutBoxContent(); ?></div>


